#!/bin/bash
set -e

help() {
    cat <<EOF
Usage: gh tidy

Tidies your work space!

"Tidying" here means several things:
* Checks out master/main and pulls the latest from remote origin
* Runs 'git gc' to clean up unnecessary files & optimize your local repo
* Checks your local branches for ones that show as merged to master, and asks for your permission to delete them
* Checks your local branches for ones that have their corresponding pull requests merged, and asks for your permission to delete them

Options:

    --rebase-all
        Rebases all your local branches to the latest master.

EOF
}


REBASE_ALL=false

while [ $# -gt 0 ]; do
  case "$1" in
  -h|--help)
    help
    exit 0
    ;;
  --rebase-all)
    REBASE_ALL=true
    ;;
  esac
  shift
done


# https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
function color_echo() {
    no_color='\033[0m'
    local color=$1
    shift
    echo -e "$color$@$no_color"
}

function cyan() {
    color_echo '\033[0;96m' "$@"
}

function magenta() {
    color_echo '\033[0;95m' "$@"
}

function green() {
    color_echo '\033[0;92m' "$@"
}

function red() {
    color_echo '\033[0;31m' "$@"
}

function yellow() {
    color_echo '\033[0;93m' "$@"
}

echo
# https://stackoverflow.com/questions/35978550/how-to-show-uncommitted-changes-in-git-and-some-git-diffs-in-detail
cyan "Checking for staged and unstaged changes..."
if [[ $(git diff HEAD) ]]; then
    red "ERROR: Unstaged/staged changes found:"
    git diff HEAD --stat
    red "Please stash or commit your changes before tidying."
    exit 1
else
    green "No staged nor unstaged commits found."
fi

function set_master_or_main() {
    local master_branch=$(git branch --list master)
    if [[ ! -z ${master_branch} ]]; then
        trunk_branch="master"
        return
    fi
    
    local main_branch=$(git branch --list main)
    if [[ ! -z ${main_branch} ]]; then
        trunk_branch="main"
    fi
}
set_master_or_main
echo
cyan "Determined '$trunk_branch' as the trunk branch"

echo
cyan "Tidying your Git workspace..."

echo
cyan "Switching to $trunk_branch to pull the latest..."
if [[ -z $GH_TIDY_DEV_MODE ]]; then
    git checkout $trunk_branch
    git pull origin $trunk_branch
else
    magenta "GH_TIDY_DEV_MODE: Skipping $trunk_branch checkout & update because in GH_TIDY_DEV_MODE"
fi

echo
cyan "Cleaning unnecessary files & optimizing your local repo..."
git gc
green "Complete!"

echo
cyan "Pruning local branches that show as 'merged' to local $trunk_branch..."
for branch in $(git branch --merged $trunk_branch --format='%(refname:short)' | grep -v $trunk_branch); do
    read -p $'\e[93m'"Branch ${branch} is the same as local $trunk_branch - delete it? (y/n) "$'\e[93m' -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git branch -D "${branch}" || true
    fi
done
green "Complete!"
# TODO Message if none found

# Covers branches that get squashed & merged
echo
cyan "Pruning YOUR local branches that have had their pull requests merged on Github..."
for branch in $(git branch --format='%(refname:short)'); do
    # TODO Make this work with collaborative branches where you aren't the author
    merged_branch=$(gh pr list --author @me --state merged --limit 1 --search head:$branch --json headRefName --jq '.[].headRefName')
    if [ ! -z ${merged_branch} ]; then
        read -p $'\e[93m'"Branch ${merged_branch} has been merged - delete it? (y/n) "$'\e[0m' -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git branch -D "${merged_branch}" || true
        fi
    fi
done
green "Complete!"
# TODO Message if none found

if "$REBASE_ALL"; then
    problem_branches=()
    echo
    cyan "Rebasing ALL local branches on to latest master..."
    # https://stackoverflow.com/questions/3846380/how-to-iterate-through-all-git-branches-using-bash-script
    for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/); do
        echo
        cyan "Rebasing ${branch}..."
        git checkout "${branch}"
        { git rebase main && green "Successfully rebase ${branch}!"; } || \
        { git rebase --abort && problem_branches+=("${branch}") && yellow "WARNING: Problem rebasing ${branch}"; }
    done
    git checkout "${trunk_branch}"
    echo
    green "Finished rebasing!"     
fi

echo
cyan "Checking if there are updates available for 'gh-tidy'..."
gh extension upgrade HaywardMorihara/gh-tidy --dry-run | grep "would have upgraded from" && \
    echo "Upgrade by running: " && \
    yellow "    gh extension upgrade HaywardMorihara/gh-tidy" \
|| green "No available updates found"

echo
if (( ${#problem_branches[@]} )); then
    yellow "WARNING: Unable to auto-rebase the following branches:"
    for problem_branch in "${problem_branches[@]}"; do
        yellow "    * ${problem_branch}"
    done
fi

echo
green "Finished tidying!"
