#!/usr/bin/env bash
set -e

help() {
    cat <<EOF
Usage: gh tidy

Tidies your work space!

"Tidying" here means several things:
    * Checks out master/main and pulls the latest from remote origin
    * Runs 'git gc' to clean up unnecessary files & optimize your local repo
    * Checks your local branches for ones that show as merged to master, and asks for your permission to delete them
    * Checks your local branches for ones that have their corresponding pull requests merged, and asks for your permission to delete them

Options:
    --rebase-all
        Rebases all your local branches to the latest master.
    --skip-gc
	Skips the 'git gc' step (which executes by default)
    --skip-prune
	Skips the 'git fetch --prune' step (which executes by default)
    --skip-update-check
	Skips checking for updates to gh-tidy extension
    --trunk branch-name
    Specifies the trunk branch to use (default: 'master' or 'main' if 'master' doesn't exist)

Environment Variables:
    GH_TIDY_REBASE_ALL      Set to 'true' to rebase all branches (same as --rebase-all)
    GH_TIDY_SKIP_GC         Set to 'true' to skip git gc (same as --skip-gc)
    GH_TIDY_SKIP_PRUNE      Set to 'true' to skip git fetch --prune (same as --skip-prune)
    GH_TIDY_SKIP_UPDATE_CHECK  Set to 'true' to skip update check (same as --skip-update-check)
    GH_TIDY_TRUNK_BRANCH    Set trunk branch name (same as --trunk)

Note: CLI flags override environment variables. Boolean values accept: 1/true/yes/on or 0/false/no/off
EOF
}

# Helper function to convert string values to boolean
to_bool() {
  local val="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
  case "$val" in
    1|true|yes|on) echo true ;;
    0|false|no|off|"") echo false ;;
    *) echo false ;;
  esac
}

# Default values
REBASE_ALL_DEFAULT=false
SKIP_GC_DEFAULT=false
SKIP_PRUNE_DEFAULT=false
SKIP_UPDATE_CHECK_DEFAULT=false
TRUNK_BRANCH_DEFAULT=""

# Initialize from environment variables if set, otherwise use defaults
REBASE_ALL=$(to_bool "${GH_TIDY_REBASE_ALL:-$REBASE_ALL_DEFAULT}")
SKIP_GC=$(to_bool "${GH_TIDY_SKIP_GC:-$SKIP_GC_DEFAULT}")
SKIP_PRUNE=$(to_bool "${GH_TIDY_SKIP_PRUNE:-$SKIP_PRUNE_DEFAULT}")
SKIP_UPDATE_CHECK=$(to_bool "${GH_TIDY_SKIP_UPDATE_CHECK:-$SKIP_UPDATE_CHECK_DEFAULT}")
TRUNK_BRANCH_PARAM="${GH_TIDY_TRUNK_BRANCH:-$TRUNK_BRANCH_DEFAULT}"

# Parse command line arguments (these override environment variables)
while [ $# -gt 0 ]; do
  case "$1" in
  -h|--help)
    help
    exit 0
    ;;
  --rebase-all)
    REBASE_ALL=true
    ;;
  --skip-gc)
    SKIP_GC=true
    ;;
  --skip-prune)
    SKIP_PRUNE=true
    ;;
  --skip-update-check)
    SKIP_UPDATE_CHECK=true
    ;;
  --trunk)
    shift
    TRUNK_BRANCH_PARAM=$1
    ;;
  esac
  shift
done


# https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
function color_echo() {
    no_color='\033[0m'
    local color=$1
    shift
    echo -e "$color$@$no_color"
}

function cyan() {
    color_echo '\033[0;96m' "$@"
}

function magenta() {
    color_echo '\033[0;95m' "$@"
}

function green() {
    color_echo '\033[0;92m' "$@"
}

function red() {
    color_echo '\033[0;31m' "$@"
}

function yellow() {
    color_echo '\033[0;93m' "$@"
}

echo
# https://stackoverflow.com/questions/35978550/how-to-show-uncommitted-changes-in-git-and-some-git-diffs-in-detail
cyan "Checking for staged and unstaged changes..."
if [[ $(git diff HEAD) ]]; then
    red "ERROR: Unstaged/staged changes found:"
    git diff HEAD --stat
    red "Please stash or commit your changes before tidying."
    exit 1
else
    green "No staged nor unstaged commits found."
fi

function set_trunk_branch() {
    if [[ ! -z ${TRUNK_BRANCH_PARAM} ]]; then
        local user_trunk_branch=$(git branch --list ${TRUNK_BRANCH_PARAM})
        if [[ ! -z ${user_trunk_branch} ]]; then
            trunk_branch=${TRUNK_BRANCH_PARAM}
            return
        else
            yellow "WARNING: Specified trunk branch '${TRUNK_BRANCH_PARAM}' not found - defaulting to 'master' or 'main'"
        fi
    fi

    local master_branch=$(git branch --list master)
    if [[ ! -z ${master_branch} ]]; then
        trunk_branch="master"
        return
    fi

    local main_branch=$(git branch --list main)
    if [[ ! -z ${main_branch} ]]; then
        trunk_branch="main"
        return
    fi

    red "No trunk branch found; specify one with the --trunk <branch-name> flag"
}

set_trunk_branch
echo
cyan "Determined '$trunk_branch' as the trunk branch"

echo
cyan "Tidying your Git workspace..."

echo
cyan "Switching to $trunk_branch to pull the latest..."
if [[ -z $GH_TIDY_DEV_MODE ]]; then
    git checkout $trunk_branch
    if ! "$SKIP_PRUNE"; then
        cyan "Fetching and pruning remote branches..."
        git fetch --prune
    fi
    trunk_remote="$(git config --get "branch.$(git branch --show-current).remote" || echo "")"
    if [[ -z "$trunk_remote" ]]; then
        # when the trunk branch doesn't have a remote set, try pulling from origin
        git pull origin "$trunk_branch"
    else
        git pull
    fi
else
    magenta "GH_TIDY_DEV_MODE: Skipping $trunk_branch checkout & update because in GH_TIDY_DEV_MODE"
fi

if ! "$SKIP_GC"; then
    echo
    cyan "Cleaning unnecessary files & optimizing your local repo..."
    git gc
    green "Complete!"
fi

# Function to check if a branch exists locally
function branch_exists_locally() {
    local branch="$1"
    if git branch --list "$branch" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to check if the branch (specified as an argument) can be deleted
function can_delete_branch() {
    local branch="$1"
    if [[ "$branch" == "$trunk_branch" ]]; then
        return 1  # Branch is equal to trunk_branch, return false
    elif ! branch_exists_locally "$branch"; then
        return 1  # Branch does not exist locally, return false
    else
        return 0  # Branch exists locally, return true
    fi
}

echo
cyan "Pruning local branches that show as 'merged' to local $trunk_branch..."
for branch in $(git branch --merged "$trunk_branch" --format='%(refname:short)'); do
    if can_delete_branch "$branch"; then
        read -p $'\e[93m'"Branch ${branch} is the same as local $trunk_branch - delete it? (y/n) "$'\e[93m' -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git branch -D "${branch}" || true
        fi
    else
        green "Skipping deletion of branch '$branch'."
    fi
done
green "Complete!"
# TODO Message if none found

# Covers branches that get squashed & merged
echo
cyan "Pruning YOUR local branches that have had their pull requests merged on Github..."
for branch in $(git branch --format='%(refname:short)'); do
    # TODO Make this work with collaborative branches where you aren't the author
    if can_delete_branch "$branch"; then
        merged_branch=$(gh pr list --author @me --state merged --limit 1 --search "head:$branch" --json headRefName --jq '.[].headRefName')
        if [ -n "${merged_branch}" ] && [ "${merged_branch}" == "${branch}" ]; then
            read -p $'\e[93m'"Branch ${merged_branch} has been merged - delete it? (y/n) "$'\e[0m' -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git branch -D "${merged_branch}" || true
            fi
        fi
    else
        green "Skipping deletion of branch '$branch'."
    fi
done
green "Complete!"
# TODO Message if none found

if "$REBASE_ALL"; then
    problem_branches=()
    echo
    cyan "Rebasing ALL local branches on to latest master..."
    # https://stackoverflow.com/questions/3846380/how-to-iterate-through-all-git-branches-using-bash-script
    for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/); do
        echo
        cyan "Rebasing ${branch}..."
        git checkout "${branch}"
        { git rebase "${trunk_branch}" && green "Successfully rebase ${branch}!"; } || \
        { git rebase --abort && problem_branches+=("${branch}") && yellow "WARNING: Problem rebasing ${branch}"; }
    done
    git checkout "${trunk_branch}"
    echo
    green "Finished rebasing!"
fi

if ! "$SKIP_UPDATE_CHECK"; then
    echo
    cyan "Checking if there are updates available for 'gh-tidy'..."
    # https://stackoverflow.com/questions/3466166/how-to-check-if-running-in-cygwin-mac-or-linux
    unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*)     machine=Linux;;
        Darwin*)    machine=Mac;;
        CYGWIN*)    machine=Cygwin;;
        *)          machine="UNSUPPORTED"
    esac
    if [ "${machine}" == "Mac" ]; then
        # https://stackoverflow.com/questions/11337041/force-line-buffering-of-stdout-in-a-pipeline/11337109#11337109
        script -q /dev/null gh extension upgrade HaywardMorihara/gh-tidy --dry-run | grep "would have upgraded from" && \
        echo "Upgrade by running: " && \
        yellow "    gh extension upgrade HaywardMorihara/gh-tidy" \
        || green "No available updates found"
    fi
    if [ "${machine}" == "Linux" ]; then
        # https://stackoverflow.com/questions/11337041/force-line-buffering-of-stdout-in-a-pipeline/11337109#11337109
        script -q -c "gh extension upgrade HaywardMorihara/gh-tidy --dry-run" /dev/null | grep "would have upgraded from" && \
        echo "Upgrade by running: " && \
        yellow "    gh extension upgrade HaywardMorihara/gh-tidy" \
        || green "No available updates found"
    fi
fi

echo
if (( ${#problem_branches[@]} )); then
    yellow "WARNING: Unable to auto-rebase the following branches:"
    for problem_branch in "${problem_branches[@]}"; do
        yellow "    * ${problem_branch}"
    done
fi

echo
green "Finished tidying!"
