#!/bin/bash
set -e

help() {
    cat <<EOF
Usage: gh tidy

Tidies your work space!

"Tidying" here means several things:
* Checks out master/main and pulls the latest from remote origin
* Checks your local branches for ones that show as merged to master, and asks for your permission to delete them
* Checks your local branches for ones that have their corresponding pull requests merged, and asks for your permission to delete them

Dependencies: jq
EOF
}

while [ $# -gt 0 ]; do
  case "$1" in
  -h|--help)
    help
    exit 0
    ;;
  esac
  shift
done

if ! type -p jq >/dev/null; then
    echo "jq not found on the system" >&2
    echo
    echo "To install on Debian/Ubuntu, please run:"
    echo "sudo apt-get install jq"
    echo
    echo "To install on Mac, please run:"
    echo "brew install jq"
    echo
    echo "For other OSs, please see https://stedolan.github.io/jq/download/"
    exit 1
fi

function set_master_or_main() {
    local master_branch=$(git branch --list master)
    if [[ ! -z ${master_branch} ]]; then
        trunk_branch="master"
        return
    fi
    
    local main_branch=$(git branch --list main)
    if [[ ! -z ${main_branch} ]]; then
        trunk_branch="main"
    fi
}
set_master_or_main
echo "Determined $trunk_branch as the trunk branch"

echo "Tidying your Git workspace..."

echo "Switching to $trunk_branch to pull the latest..."
git checkout $trunk_branch
git pull origin $trunk_branch

echo "Pruning local branches that show as 'merged' to local $trunk_branch..."
for branch in $(git branch --merged $trunk_branch --format='%(refname:short)' | grep -v $trunk_branch); do
    read -p "Branch ${branch} is the same as local $trunk_branch - delete it? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git branch -D "${branch}" || true
    fi
done
echo "Complete!"
# TODO Message if none found

# Covers branches that get squashed & merged
echo "Pruning YOUR local branches that have had their pull requests merged on Github..."
for branch in $(git branch --format='%(refname:short)'); do
    # TODO Make this work with collaborative branches where you aren't the author
    merged_branch=$(gh pr list --author @me --state merged --json headRefName --limit 1 --search head:$branch | jq -r '.[].headRefName')
    if [ ! -z ${merged_branch} ]; then
        read -p "Branch ${merged_branch} has been merged - delete it? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git branch -D "${merged_branch}" || true
        fi
    fi
done
echo "Complete!"
# TODO Message if none found

echo "Finished tidying!"
